{
  "stats": {
    "suites": 19,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2021-10-16T19:27:36.506Z",
    "end": "2021-10-16T19:27:37.863Z",
    "duration": 1357,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a29ba64c-a680-43b3-aa04-7ff94634c19a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 22,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// start the server\napp.listen(port, () => {\n    mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true, useFindAndModify: true });\n    mongoose.connection.once('open', () => {\n        console.log('connected to database');\n        done();\n    }).on('connectionError', (err) =>{\n        console.log(err);\n    })\n})",
          "err": {},
          "uuid": "75421850-2a25-491b-97bd-d9fb793356f7",
          "parentUUID": "a29ba64c-a680-43b3-aa04-7ff94634c19a",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 207,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const normalUser = await chai.request(app).post('/auth/signup').set('Content-Type','application/json').send(mockData.users.normalUser)\nconst admin = await chai.request(app).post('/auth/signup').set('Content-Type','application/json').send(mockData.users.admin)\nawait User.findOne({email:mockData.users.admin.email}).update({role:\"admin\"})\nconst  category = await Category(mockData.categories[0]).save()\nmockData.products.forEach(async p=>{\n    const pp = await Product({...p,category:category.id}).save()\n    products.push(pp)\n})",
          "err": {},
          "uuid": "80bdc386-202a-4879-a73c-7d9c899a1afd",
          "parentUUID": "a29ba64c-a680-43b3-aa04-7ff94634c19a",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 5,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "mongoose.connection.db.dropDatabase(() => {\n    mongoose.disconnect().then(() => done()).catch(err => console.log(err));\n})",
          "err": {},
          "uuid": "54b82189-731e-47ff-81ce-b026a431a22f",
          "parentUUID": "a29ba64c-a680-43b3-aa04-7ff94634c19a",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "892ff69d-683f-4f4a-a46b-b541cfae34c2",
          "title": "Signup",
          "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\auth.test.js",
          "file": "\\__tests__\\auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "91e9295c-768f-4ab4-9df6-f82e739db506",
              "title": "POST /auth/signup",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\auth.test.js",
              "file": "\\__tests__\\auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns validation error when invalid email is sent",
                  "fullTitle": "Signup POST /auth/signup returns validation error when invalid email is sent",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const signUpBody = {\n    \"email\": \"akak.com\",\n    \"password\": \"311114\",\n    \"fullName\": \"dkj asdaskjdnaskjn\"\n}\nchai\n    .request(app)\n    .post('/auth/signup')\n    .set('Content-Type', 'application/json')\n    .send(signUpBody)\n    .end((err, res) => {\n        if (err) throw err;\n        expect(res.body).not.to.eql(null)\n        expect(res.body.error).not.to.eql(null)\n        expect(res.body.error[0].message.includes('email')).to.eql(true)\n        expect(res.status).to.eql(400)\n        done()\n    })",
                  "err": {},
                  "uuid": "ccf42e7f-6d8c-4e4c-b2f6-cc2ce8fab6bc",
                  "parentUUID": "91e9295c-768f-4ab4-9df6-f82e739db506",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns validation error when passowrd is less than 6 characters",
                  "fullTitle": "Signup POST /auth/signup returns validation error when passowrd is less than 6 characters",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const signUpBody = {\n    \"email\": \"ak@aak.com\",\n    \"password\": \"31\",\n    \"fullName\": \"dkj asdaskjdnaskjn\"\n}\nchai\n    .request(app)\n    .post('/auth/signup')\n    .set('Content-Type', 'application/json')\n    .send(signUpBody)\n    .end((err, res) => {\n        if (err) throw err;\n        expect(res.body).not.to.eql(null)\n        expect(res.body.error).not.to.eql(undefined)\n        expect(res.body.error[0].message.includes('password')).to.eql(true)\n        expect(res.status).to.eql(400)\n        done()\n    })",
                  "err": {},
                  "uuid": "b18cbfa4-b5c6-4487-a91e-32df31ae62f8",
                  "parentUUID": "91e9295c-768f-4ab4-9df6-f82e739db506",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns validation error when fullName is not present or is less than 6 chars",
                  "fullTitle": "Signup POST /auth/signup returns validation error when fullName is not present or is less than 6 chars",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const signUpBody = {\n    \"email\": \"ak@aak.com\",\n    \"password\": \"123456\",\n    \"fullName\": \"dkj\"\n}\nchai\n    .request(app)\n    .post('/auth/signup')\n    .set('Content-Type', 'application/json')\n    .send(signUpBody)\n    .end((err, res) => {\n        if (err) throw err;\n        expect(res.body).not.to.eql(null)\n        expect(res.body.error).not.to.eql(undefined)\n        expect(res.body.error[0].message.includes('fullName')).to.eql(true)\n        expect(res.status).to.eql(400)\n        done()\n    })",
                  "err": {},
                  "uuid": "d396c55b-a456-476c-bb56-bf8ba9b0f344",
                  "parentUUID": "91e9295c-768f-4ab4-9df6-f82e739db506",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns user key with value as userId on succesful signup",
                  "fullTitle": "Signup POST /auth/signup returns user key with value as userId on succesful signup",
                  "timedOut": false,
                  "duration": 68,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const signUpBody = {\n    \"email\": \"ak@aakq.com\",\n    \"password\": \"123456\",\n    \"fullName\": \"dkjklq\"\n}\nchai\n    .request(app)\n    .post('/auth/signup')\n    .set('Content-Type', 'application/json')\n    .send(signUpBody)\n    .end((err, res) => {\n        if (err) throw err;\n        expect(res.body).not.to.eql(null)\n        expect(res.body.error).to.eql(undefined)\n        expect(res.body.user).to.not.\n            eql(null)\n        expect(res.status).to.eql(200)\n        done()\n    })",
                  "err": {},
                  "uuid": "d935e48d-80c2-4747-a0e7-ea9f6b8dc132",
                  "parentUUID": "91e9295c-768f-4ab4-9df6-f82e739db506",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns error if email already exists",
                  "fullTitle": "Signup POST /auth/signup returns error if email already exists",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const signUpBody = {\n                \"email\": \"ak@aakq.com\",\n                \"password\": \"123456\",\n                \"fullName\": \"dkjdddd\"\n            }\n            const res = await chai\n                .request(app)\n                .post('/auth/signup')\n                .set('Content-Type', 'application/json')\n                .send(signUpBody);\n            expect(res.body).not.to.eql(null)\n            expect(res.body.error).not.to.eql(undefined)\n            expect((/Email already in use by someone/i).test(res.body['error'])).to.eql(true)\n            expect(res.status).to.eql(400)",
                  "err": {},
                  "uuid": "b8a2d19b-b6e7-4a38-b386-24a3264b6e43",
                  "parentUUID": "91e9295c-768f-4ab4-9df6-f82e739db506",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ccf42e7f-6d8c-4e4c-b2f6-cc2ce8fab6bc",
                "b18cbfa4-b5c6-4487-a91e-32df31ae62f8",
                "d396c55b-a456-476c-bb56-bf8ba9b0f344",
                "d935e48d-80c2-4747-a0e7-ea9f6b8dc132",
                "b8a2d19b-b6e7-4a38-b386-24a3264b6e43"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "2a386e7d-e65c-4197-8a32-b620aa74cc82",
          "title": "Signin",
          "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\auth.test.js",
          "file": "\\__tests__\\auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "50e2a25e-2d4d-4b72-ae5f-0a2239214218",
              "title": "POST /auth/signin",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\auth.test.js",
              "file": "\\__tests__\\auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns auth-token and message in response and auth-token in header on successful login",
                  "fullTitle": "Signin POST /auth/signin returns auth-token and message in response and auth-token in header on successful login",
                  "timedOut": false,
                  "duration": 68,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const signInBody = {\n    \"email\": \"ak@aakq.com\",\n    \"password\": \"123456\"\n}\nconst res = await chai\n    .request(app)\n    .post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send(signInBody);\nexpect(res.body).not.to.eql(null)\nexpect(res.body.error).to.eql(undefined)\nexpect(res.body['auth-token']).to.not.eql(undefined)\nexpect(res.header['auth-token']).to.not.eql(undefined)\nexpect((/User logged in successfully/i).test(res.body.message)).to.eql(true)\nexpect(res.status).to.eql(201)",
                  "err": {},
                  "uuid": "17749eee-e9f7-40a1-abb1-249d12c8a31b",
                  "parentUUID": "50e2a25e-2d4d-4b72-ae5f-0a2239214218",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns message password is wrong on wrong password",
                  "fullTitle": "Signin POST /auth/signin returns message password is wrong on wrong password",
                  "timedOut": false,
                  "duration": 66,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const signInBody = {\n    \"email\": \"ak@aakq.com\",\n    \"password\": \"123456a\"\n}\nconst res = await chai\n    .request(app)\n    .post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send(signInBody);\nexpect(res.body).not.to.eql(null)\nexpect(res.body.message).to.not.eql(undefined)\nexpect(res.body['auth-token']).to.eql(undefined)\nexpect(res.header['auth-token']).to.eql(undefined)\nexpect((/password is wrong/i).test(res.body.message)).to.eql(true)\nexpect(res.status).to.eql(400)",
                  "err": {},
                  "uuid": "34fa06fe-7e7d-4372-a1bc-da6976b6089f",
                  "parentUUID": "50e2a25e-2d4d-4b72-ae5f-0a2239214218",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "17749eee-e9f7-40a1-abb1-249d12c8a31b",
                "34fa06fe-7e7d-4372-a1bc-da6976b6089f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 134,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "2fe5cd24-ce37-4ed2-a053-6daa461a541e",
          "title": "/cart",
          "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\cart.test.js",
          "file": "\\__tests__\\cart.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7ef9ac65-424d-4851-bd8f-f01045eb954f",
              "title": "POST /cart",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\cart.test.js",
              "file": "\\__tests__\\cart.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns a new cart with the items if no existing cart",
                  "fullTitle": "/cart POST /cart returns a new cart with the items if no existing cart",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const products = await Product.find({}) \nconst resBody = {\n    productIds:[\n        {\n            product:products[0].id,\n            quantity:10\n        }\n    ]\n}\nconst { email, password } = mockData.users.normalUser\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\n\nconst auth_token = signInRes.body['auth-token']\nconst res = await chai\n    .request(app)\n    .post('/cart')\n    .set('Content-Type','application/json')\n    .set('auth-token',auth_token)\n    .send(resBody)\nexpect(res.body.newCart).to.not.eql(undefined)\nexpect(res.body.newCart.products.length).to.eql(1)",
                  "err": {},
                  "uuid": "27a477ee-4c26-4b36-9d36-7fe4370bf6de",
                  "parentUUID": "7ef9ac65-424d-4851-bd8f-f01045eb954f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "updates and returns a new cart if already existing cart",
                  "fullTitle": "/cart POST /cart updates and returns a new cart if already existing cart",
                  "timedOut": false,
                  "duration": 76,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const products = await Product.find({}) \nconst resBody = {\n    productIds:[\n        {\n            product:products[0].id,\n            quantity:10\n        }\n    ]\n}\nconst { email, password } = mockData.users.normalUser\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\n\nconst auth_token = signInRes.body['auth-token']\nconst res = await chai\n    .request(app)\n    .post('/cart')\n    .set('Content-Type','application/json')\n    .set('auth-token',auth_token)\n    .send(resBody)\nexpect(res.body.newCart).to.not.eql(undefined)\nexpect(res.body.newCart.products.length).to.eql(1)\nexpect(res.body.newCart.products[0].quantity).to.eql(20)",
                  "err": {},
                  "uuid": "0b2b7e0e-b2c9-497f-a230-55d7f1cd8ec5",
                  "parentUUID": "7ef9ac65-424d-4851-bd8f-f01045eb954f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27a477ee-4c26-4b36-9d36-7fe4370bf6de",
                "0b2b7e0e-b2c9-497f-a230-55d7f1cd8ec5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 169,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "c957aab1-14b2-43b8-816c-bb98a7ee32a0",
              "title": "GET /cart",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\cart.test.js",
              "file": "\\__tests__\\cart.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns cart if it exists",
                  "fullTitle": "/cart GET /cart returns cart if it exists",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { email, password } = mockData.users.normalUser\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\n\nconst auth_token = signInRes.body['auth-token']\nconst res = await chai\n                .request(app)\n                .get('/cart')\n                .set('Content-Type','application/json')\n                .set('auth-token',auth_token)\nexpect(res.body.cart).to.not.eql(undefined)\nexpect(res.body.cart.products.length).to.eql(1)\nexpect(res.body.cart.products[0].quantity).to.eql(20)",
                  "err": {},
                  "uuid": "f2c0a745-e262-4d6c-9ba8-5da7f73e59e5",
                  "parentUUID": "c957aab1-14b2-43b8-816c-bb98a7ee32a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns empty array if no cart is found",
                  "fullTitle": "/cart GET /cart returns empty array if no cart is found",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { email, password } = mockData.users.normalUser\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\n\nconst auth_token = signInRes.body['auth-token']\nawait Cart.deleteMany({})\nconst res = await chai\n                .request(app)\n                .get('/cart')\n                .set('Content-Type','application/json')\n                .set('auth-token',auth_token)\nexpect(res.body.cart.length).to.eql(0)",
                  "err": {},
                  "uuid": "f3941d73-502f-49e4-949a-d0f0df92caf6",
                  "parentUUID": "c957aab1-14b2-43b8-816c-bb98a7ee32a0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2c0a745-e262-4d6c-9ba8-5da7f73e59e5",
                "f3941d73-502f-49e4-949a-d0f0df92caf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 140,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "9db63653-859f-4cbc-809b-3b1941ccc855",
          "title": "/category",
          "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\category.test.js",
          "file": "\\__tests__\\category.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "66ca88b1-233e-434d-b88f-c432091d8428",
              "title": "GET /category",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\category.test.js",
              "file": "\\__tests__\\category.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the list of all products",
                  "fullTitle": "/category GET /category should return the list of all products",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/category')\n    .set('Content-Type', 'application/json')\nexpect(res.body.categories.length).to.eql(1)",
                  "err": {},
                  "uuid": "60cbd147-cd3d-4f37-af82-6768220f6800",
                  "parentUUID": "66ca88b1-233e-434d-b88f-c432091d8428",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60cbd147-cd3d-4f37-af82-6768220f6800"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "1c1b7b53-e8db-4bca-9318-9d67ebd22844",
              "title": "POST /category",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\category.test.js",
              "file": "\\__tests__\\category.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "07c715f4-2d5b-437f-9f4d-074bf2544f29",
                  "title": "When normal user sends request",
                  "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\category.test.js",
                  "file": "\\__tests__\\category.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not add the category and return a message",
                      "fullTitle": "/category POST /category When normal user sends request Should not add the category and return a message",
                      "timedOut": false,
                      "duration": 69,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { email, password } = mockData.users.normalUser\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\n\nconst auth_token = signInRes.body['auth-token']\nconst reqBody = {\n    name:'Cars'\n}\nconst prodRes = await chai.request(app).post('/category')\n    .set('Content-Type', 'application/json')\n    .set('auth-token',auth_token)\n    .send(reqBody)\nexpect(prodRes.status).to.eql(400)\nexpect((/Access denied/i).test(prodRes.body.message)).to.eql(true)",
                      "err": {},
                      "uuid": "69e368b3-9f5a-48de-94dc-5e87683a8dc9",
                      "parentUUID": "07c715f4-2d5b-437f-9f4d-074bf2544f29",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "69e368b3-9f5a-48de-94dc-5e87683a8dc9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 69,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "f27aaa05-f735-46c6-8642-b4f7c0e8038d",
                  "title": "When admin sends request",
                  "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\category.test.js",
                  "file": "\\__tests__\\category.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should add the category",
                      "fullTitle": "/category POST /category When admin sends request Should add the category",
                      "timedOut": false,
                      "duration": 73,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { email, password } = mockData.users.admin\nconst category = await Category.findOne({})\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\nconst auth_token = signInRes.body['auth-token']\nconst reqBody = {\n    name: 'Cars 2',\n}\nconst prodRes = await chai.request(app).post('/category')\n    .set('Content-Type', 'application/json')\n    .set('auth-token',auth_token)\n    .send(reqBody)\nexpect(prodRes.body.result).to.not.eql(undefined)\nexpect(prodRes.body.result.name).to.eql(reqBody.name)",
                      "err": {},
                      "uuid": "d42a25ba-4fec-4308-a0c9-0b6146e35687",
                      "parentUUID": "f27aaa05-f735-46c6-8642-b4f7c0e8038d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d42a25ba-4fec-4308-a0c9-0b6146e35687"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 73,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "42691e2a-f7ce-4847-8aae-65726eb6666d",
          "title": "/order",
          "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\order.test.js",
          "file": "\\__tests__\\order.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "87e98283-ea78-422b-b347-7e54165822c2",
              "title": "POST /order",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\order.test.js",
              "file": "\\__tests__\\order.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates an order if cart exists for logged in user",
                  "fullTitle": "/order POST /order creates an order if cart exists for logged in user",
                  "timedOut": false,
                  "duration": 97,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { email, password } = mockData.users.normalUser\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\n\nconst auth_token = signInRes.body['auth-token']\nconst products = await Product.find({}) \nconst resBody = {\n    productIds:[\n        {\n            product:products[0].id,\n            quantity:20\n        }\n    ]\n}\nawait chai\n    .request(app)\n    .post('/cart')\n    .set('Content-Type','application/json')\n    .set('auth-token',auth_token)\n    .send(resBody)\nconst res = await chai\n                .request(app)\n                .post('/order')\n                .set('Content-Type','application/json')\n                .set('auth-token',auth_token)\nexpect((/Order successful/i).test(res.body.message)).to.eql(true)\nexpect(res.body.totalPrice).to.eql(1010)",
                  "err": {},
                  "uuid": "f85e3990-fb62-4630-8113-df6449969531",
                  "parentUUID": "87e98283-ea78-422b-b347-7e54165822c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "does not create order if cart does not exist i.e empty",
                  "fullTitle": "/order POST /order does not create order if cart does not exist i.e empty",
                  "timedOut": false,
                  "duration": 72,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { email, password } = mockData.users.normalUser\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\n\nconst auth_token = signInRes.body['auth-token']\nconst res = await chai\n                .request(app)\n                .post('/order')\n                .set('Content-Type','application/json')\n                .set('auth-token',auth_token)\nexpect((/No cart found/i).test(res.body.message)).to.eql(true)\nexpect(res.status).to.eql(400)",
                  "err": {},
                  "uuid": "cbb67e64-8f60-4ac0-8c97-3056cff1cc0e",
                  "parentUUID": "87e98283-ea78-422b-b347-7e54165822c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns message out of stock if cart product quantity more than in stock",
                  "fullTitle": "/order POST /order returns message out of stock if cart product quantity more than in stock",
                  "timedOut": false,
                  "duration": 77,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = await Product.findOne({})\nconst cartBod = {\n    productIds:[\n        {\n            product:product.id,\n            quantity:product.quantity + 10\n        }\n    ]\n}\nconst { email, password } = mockData.users.normalUser\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\n\nconst auth_token = signInRes.body['auth-token']\nawait chai\n    .request(app)\n    .post('/cart')\n    .set('Content-Type','application/json')\n    .set('auth-token',auth_token)\n    .send(cartBod)\nconst res = await chai\n                .request(app)\n                .post('/order')\n                .set('Content-Type','application/json')\n                .set('auth-token',auth_token) \nexpect((/Some products are out of stock/i).test(res.body.message)).to.eql(true)\nexpect(res.body.outOfStockItems).to.eql(product.name)",
                  "err": {},
                  "uuid": "30e999c5-09d7-45c2-83d3-e591e205b68d",
                  "parentUUID": "87e98283-ea78-422b-b347-7e54165822c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f85e3990-fb62-4630-8113-df6449969531",
                "cbb67e64-8f60-4ac0-8c97-3056cff1cc0e",
                "30e999c5-09d7-45c2-83d3-e591e205b68d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 246,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "271ec9e5-4cb3-4f5a-b881-6fe58ed602ba",
          "title": "/product",
          "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\product.test.js",
          "file": "\\__tests__\\product.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ef75d9b4-b15a-4cb7-aebc-058e488603ba",
              "title": "GET /product",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\product.test.js",
              "file": "\\__tests__\\product.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the list of all products",
                  "fullTitle": "/product GET /product should return the list of all products",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/product')\n    .set('Content-Type', 'application/json')\nexpect(res.body.products.length).to.eql(2)",
                  "err": {},
                  "uuid": "969b0e02-d8d1-46fc-90f2-663d55c008f1",
                  "parentUUID": "ef75d9b4-b15a-4cb7-aebc-058e488603ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "969b0e02-d8d1-46fc-90f2-663d55c008f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "b285c8f4-0a18-4d8e-81e6-3a85f84853bc",
              "title": "POST /product",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\product.test.js",
              "file": "\\__tests__\\product.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "518748a0-6da3-45c2-91bd-c0120c86c877",
                  "title": "When normal user sends request",
                  "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\product.test.js",
                  "file": "\\__tests__\\product.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not add the product and return a message",
                      "fullTitle": "/product POST /product When normal user sends request Should not add the product and return a message",
                      "timedOut": false,
                      "duration": 78,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { email, password } = mockData.users.normalUser\nconst category = await Category.findOne({})\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\n\nconst auth_token = signInRes.body['auth-token']\nconst reqBody = {\n    name: 'Admin bags',\n    price: 10000,\n    quantity: 1,\n    category: category.id\n}\nconst prodRes = await chai.request(app).post('/product')\n    .set('Content-Type', 'application/json')\n    .set('auth-token',auth_token)\n    .send(reqBody)\nexpect(prodRes.status).to.eql(400)\nexpect((/Access denied/i).test(prodRes.body.message)).to.eql(true)",
                      "err": {},
                      "uuid": "2d8e8c44-4271-443f-8a11-0ea71cf24fc0",
                      "parentUUID": "518748a0-6da3-45c2-91bd-c0120c86c877",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2d8e8c44-4271-443f-8a11-0ea71cf24fc0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 78,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "36e5e070-79e8-4dbe-b9b2-fd0f94ef117b",
                  "title": "When admin sends request",
                  "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\product.test.js",
                  "file": "\\__tests__\\product.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should add the product",
                      "fullTitle": "/product POST /product When admin sends request Should add the product",
                      "timedOut": false,
                      "duration": 74,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { email, password } = mockData.users.admin\nconst category = await Category.findOne({})\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\nconst auth_token = signInRes.body['auth-token']\nconst reqBody = {\n    name: 'Admin bags',\n    price: 10000,\n    quantity: 1,\n    category: category.id\n}\nconst prodRes = await chai.request(app).post('/product')\n    .set('Content-Type', 'application/json')\n    .set('auth-token',auth_token)\n    .send(reqBody)\nexpect(prodRes.body.result).to.not.eql(undefined)\nexpect(prodRes.body.result.name).to.eql(reqBody.name)",
                      "err": {},
                      "uuid": "9994ae5d-dccd-48ac-acb2-6e16b65b1289",
                      "parentUUID": "36e5e070-79e8-4dbe-b9b2-fd0f94ef117b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9994ae5d-dccd-48ac-acb2-6e16b65b1289"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 74,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}