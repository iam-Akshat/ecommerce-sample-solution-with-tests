{
  "stats": {
    "suites": 18,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2021-10-16T11:19:57.848Z",
    "end": "2021-10-16T11:19:59.969Z",
    "duration": 2121,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c30ae0f1-ae7a-434b-bbbb-2687c78c361b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 58,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// start the server\napp.listen(port, () => {\n    mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true, useFindAndModify: true });\n    mongoose.connection.once('open', () => {\n        console.log('connected to database');\n        done();\n    }).on('connectionError', (err) =>{\n        console.log(err);\n    })\n})",
          "err": {},
          "uuid": "57d6eaa5-e75b-4605-810d-c2aba2fbf273",
          "parentUUID": "c30ae0f1-ae7a-434b-bbbb-2687c78c361b",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 383,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const normalUser = await chai.request(app).post('/auth/signup').set('Content-Type','application/json').send(mockData.users.normalUser)\nconst admin = await chai.request(app).post('/auth/signup').set('Content-Type','application/json').send(mockData.users.admin)\nawait User.findOne({email:mockData.users.admin.email}).update({role:\"admin\"})\nconst  category = await Category(mockData.categories[0]).save()\nmockData.products.forEach(async p=>{\n    const pp = await Product({...p,category:category.id}).save()\n    products.push(pp)\n})",
          "err": {},
          "uuid": "d8316cd7-a73a-4a55-8c8d-a71955e7d94b",
          "parentUUID": "c30ae0f1-ae7a-434b-bbbb-2687c78c361b",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 11,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "mongoose.connection.db.dropDatabase(() => {\n    mongoose.disconnect().then(() => done()).catch(err => console.log(err));\n})",
          "err": {},
          "uuid": "ccb337da-6cf2-407f-8c32-b5ae9e531d1a",
          "parentUUID": "c30ae0f1-ae7a-434b-bbbb-2687c78c361b",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "10a7a84c-9a11-4503-921f-4edc8366ab2c",
          "title": "Signup",
          "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\auth.test.js",
          "file": "\\__tests__\\auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ab27e91a-019f-41e3-a90d-8fa5ea33a9fa",
              "title": "POST /auth/signup",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\auth.test.js",
              "file": "\\__tests__\\auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns validation error when invalid email is sent",
                  "fullTitle": "Signup POST /auth/signup returns validation error when invalid email is sent",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const signUpBody = {\n    \"email\": \"akak.com\",\n    \"password\": \"311114\",\n    \"fullName\": \"dkj asdaskjdnaskjn\"\n}\nchai\n    .request(app)\n    .post('/auth/signup')\n    .set('Content-Type', 'application/json')\n    .send(signUpBody)\n    .end((err, res) => {\n        if (err) throw err;\n        expect(res.body).not.to.eql(null)\n        expect(res.body.error).not.to.eql(null)\n        expect(res.body.error[0].message.includes('email')).to.eql(true)\n        expect(res.status).to.eql(400)\n        done()\n    })",
                  "err": {},
                  "uuid": "80ecdcd8-3356-44aa-9da7-6952542978c6",
                  "parentUUID": "ab27e91a-019f-41e3-a90d-8fa5ea33a9fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns validation error when passowrd is less than 6 characters",
                  "fullTitle": "Signup POST /auth/signup returns validation error when passowrd is less than 6 characters",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const signUpBody = {\n    \"email\": \"ak@aak.com\",\n    \"password\": \"31\",\n    \"fullName\": \"dkj asdaskjdnaskjn\"\n}\nchai\n    .request(app)\n    .post('/auth/signup')\n    .set('Content-Type', 'application/json')\n    .send(signUpBody)\n    .end((err, res) => {\n        if (err) throw err;\n        expect(res.body).not.to.eql(null)\n        expect(res.body.error).not.to.eql(undefined)\n        expect(res.body.error[0].message.includes('password')).to.eql(true)\n        expect(res.status).to.eql(400)\n        done()\n    })",
                  "err": {},
                  "uuid": "42e88bf5-a34c-419c-b6ea-1d12b196da49",
                  "parentUUID": "ab27e91a-019f-41e3-a90d-8fa5ea33a9fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns validation error when fullName is not present or is less than 6 chars",
                  "fullTitle": "Signup POST /auth/signup returns validation error when fullName is not present or is less than 6 chars",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const signUpBody = {\n    \"email\": \"ak@aak.com\",\n    \"password\": \"123456\",\n    \"fullName\": \"dkj\"\n}\nchai\n    .request(app)\n    .post('/auth/signup')\n    .set('Content-Type', 'application/json')\n    .send(signUpBody)\n    .end((err, res) => {\n        if (err) throw err;\n        expect(res.body).not.to.eql(null)\n        expect(res.body.error).not.to.eql(undefined)\n        expect(res.body.error[0].message.includes('fullName')).to.eql(true)\n        expect(res.status).to.eql(400)\n        done()\n    })",
                  "err": {},
                  "uuid": "e82b56ad-8bd7-46e8-9a7d-9f28b1adbc93",
                  "parentUUID": "ab27e91a-019f-41e3-a90d-8fa5ea33a9fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns user key with value as userId on succesful signup",
                  "fullTitle": "Signup POST /auth/signup returns user key with value as userId on succesful signup",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const signUpBody = {\n    \"email\": \"ak@aakq.com\",\n    \"password\": \"123456\",\n    \"fullName\": \"dkjklq\"\n}\nchai\n    .request(app)\n    .post('/auth/signup')\n    .set('Content-Type', 'application/json')\n    .send(signUpBody)\n    .end((err, res) => {\n        if (err) throw err;\n        expect(res.body).not.to.eql(null)\n        expect(res.body.error).to.eql(undefined)\n        expect(res.body.user).to.not.\n            eql(null)\n        expect(res.status).to.eql(200)\n        done()\n    })",
                  "err": {},
                  "uuid": "4a9689d2-4819-4da1-bc88-b87efc66a0be",
                  "parentUUID": "ab27e91a-019f-41e3-a90d-8fa5ea33a9fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns error if email already exists",
                  "fullTitle": "Signup POST /auth/signup returns error if email already exists",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const signUpBody = {\n                \"email\": \"ak@aakq.com\",\n                \"password\": \"123456\",\n                \"fullName\": \"dkjdddd\"\n            }\n            const res = await chai\n                .request(app)\n                .post('/auth/signup')\n                .set('Content-Type', 'application/json')\n                .send(signUpBody);\n            expect(res.body).not.to.eql(null)\n            expect(res.body.error).not.to.eql(undefined)\n            expect((/Email already in use by someone/i).test(res.body['error'])).to.eql(true)\n            expect(res.status).to.eql(400)",
                  "err": {},
                  "uuid": "101f0fa8-b0ff-4c7f-b309-a3b30f053f4f",
                  "parentUUID": "ab27e91a-019f-41e3-a90d-8fa5ea33a9fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80ecdcd8-3356-44aa-9da7-6952542978c6",
                "42e88bf5-a34c-419c-b6ea-1d12b196da49",
                "e82b56ad-8bd7-46e8-9a7d-9f28b1adbc93",
                "4a9689d2-4819-4da1-bc88-b87efc66a0be",
                "101f0fa8-b0ff-4c7f-b309-a3b30f053f4f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 140,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "52fc01cc-f627-45af-b2c4-ffd062197612",
          "title": "Signin",
          "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\auth.test.js",
          "file": "\\__tests__\\auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "43c2e508-46e8-4fe3-87ae-d4319c6dac23",
              "title": "POST /auth/signin",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\auth.test.js",
              "file": "\\__tests__\\auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns auth-token and message in response and auth-token in header on successful login",
                  "fullTitle": "Signin POST /auth/signin returns auth-token and message in response and auth-token in header on successful login",
                  "timedOut": false,
                  "duration": 114,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const signInBody = {\n    \"email\": \"ak@aakq.com\",\n    \"password\": \"123456\"\n}\nconst res = await chai\n    .request(app)\n    .post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send(signInBody);\nexpect(res.body).not.to.eql(null)\nexpect(res.body.error).to.eql(undefined)\nexpect(res.body['auth-token']).to.not.eql(undefined)\nexpect(res.header['auth-token']).to.not.eql(undefined)\nexpect((/User logged in successfully/i).test(res.body.message)).to.eql(true)\nexpect(res.status).to.eql(201)",
                  "err": {},
                  "uuid": "50e0f857-b718-42a3-a783-cd6727f836fc",
                  "parentUUID": "43c2e508-46e8-4fe3-87ae-d4319c6dac23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns message password is wrong on wrong password",
                  "fullTitle": "Signin POST /auth/signin returns message password is wrong on wrong password",
                  "timedOut": false,
                  "duration": 118,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const signInBody = {\n    \"email\": \"ak@aakq.com\",\n    \"password\": \"123456a\"\n}\nconst res = await chai\n    .request(app)\n    .post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send(signInBody);\nexpect(res.body).not.to.eql(null)\nexpect(res.body.message).to.not.eql(undefined)\nexpect(res.body['auth-token']).to.eql(undefined)\nexpect(res.header['auth-token']).to.eql(undefined)\nexpect((/password is wrong/i).test(res.body.message)).to.eql(true)\nexpect(res.status).to.eql(400)",
                  "err": {},
                  "uuid": "639ef277-1499-437b-bc31-c942b65f9cf5",
                  "parentUUID": "43c2e508-46e8-4fe3-87ae-d4319c6dac23",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50e0f857-b718-42a3-a783-cd6727f836fc",
                "639ef277-1499-437b-bc31-c942b65f9cf5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 232,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "318408c8-7e65-48f8-80bc-1629819d49fc",
          "title": "/cart",
          "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\cart.test.js",
          "file": "\\__tests__\\cart.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3e8d00bb-c478-42c5-9343-7a9ce22266bd",
              "title": "POST /cart",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\cart.test.js",
              "file": "\\__tests__\\cart.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns a new cart with the items if no existing cart",
                  "fullTitle": "/cart POST /cart returns a new cart with the items if no existing cart",
                  "timedOut": false,
                  "duration": 177,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const products = await Product.find({}) \nconst resBody = {\n    productIds:[\n        {\n            product:products[0].id,\n            quantity:10\n        }\n    ]\n}\nconst { email, password } = mockData.users.normalUser\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\n\nconst auth_token = signInRes.body['auth-token']\nconst res = await chai\n    .request(app)\n    .post('/cart')\n    .set('Content-Type','application/json')\n    .set('auth-token',auth_token)\n    .send(resBody)\nexpect(res.body.newCart).to.not.eql(undefined)\nexpect(res.body.newCart.products.length).to.eql(1)",
                  "err": {},
                  "uuid": "6835ad77-a1d8-4549-abd2-eedf85359a5d",
                  "parentUUID": "3e8d00bb-c478-42c5-9343-7a9ce22266bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "updates and returns a new cart if already existing cart",
                  "fullTitle": "/cart POST /cart updates and returns a new cart if already existing cart",
                  "timedOut": false,
                  "duration": 139,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const products = await Product.find({}) \nconst resBody = {\n    productIds:[\n        {\n            product:products[0].id,\n            quantity:10\n        }\n    ]\n}\nconst { email, password } = mockData.users.normalUser\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\n\nconst auth_token = signInRes.body['auth-token']\nconst res = await chai\n    .request(app)\n    .post('/cart')\n    .set('Content-Type','application/json')\n    .set('auth-token',auth_token)\n    .send(resBody)\nexpect(res.body.newCart).to.not.eql(undefined)\nexpect(res.body.newCart.products.length).to.eql(1)\nexpect(res.body.newCart.products[0].quantity).to.eql(20)",
                  "err": {},
                  "uuid": "2b8187ec-9e64-4ac7-9d99-c8f72d21754a",
                  "parentUUID": "3e8d00bb-c478-42c5-9343-7a9ce22266bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6835ad77-a1d8-4549-abd2-eedf85359a5d",
                "2b8187ec-9e64-4ac7-9d99-c8f72d21754a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 316,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "6dc1f47b-d21f-4cf9-9053-3f70632d49d5",
          "title": "/category",
          "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\category.test.js",
          "file": "\\__tests__\\category.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "be71fc7c-0fdd-4dc2-be10-21815f828051",
              "title": "GET /category",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\category.test.js",
              "file": "\\__tests__\\category.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the list of all products",
                  "fullTitle": "/category GET /category should return the list of all products",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/category')\n    .set('Content-Type', 'application/json')\nexpect(res.body.categories.length).to.eql(1)",
                  "err": {},
                  "uuid": "fa5f4de2-5e17-4ba4-8a39-95e8371014ac",
                  "parentUUID": "be71fc7c-0fdd-4dc2-be10-21815f828051",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fa5f4de2-5e17-4ba4-8a39-95e8371014ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "cc88b76e-2cef-416e-ac01-e8ac8ce44642",
              "title": "POST /category",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\category.test.js",
              "file": "\\__tests__\\category.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "f90c922c-a9c3-4dab-8a97-fd5fd18dd5eb",
                  "title": "When normal user sends request",
                  "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\category.test.js",
                  "file": "\\__tests__\\category.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not add the category and return a message",
                      "fullTitle": "/category POST /category When normal user sends request Should not add the category and return a message",
                      "timedOut": false,
                      "duration": 133,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { email, password } = mockData.users.normalUser\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\n\nconst auth_token = signInRes.body['auth-token']\nconst reqBody = {\n    name:'Cars'\n}\nconst prodRes = await chai.request(app).post('/category')\n    .set('Content-Type', 'application/json')\n    .set('auth-token',auth_token)\n    .send(reqBody)\nexpect(prodRes.status).to.eql(400)\nexpect((/Access denied/i).test(prodRes.body.message)).to.eql(true)",
                      "err": {},
                      "uuid": "ba46b56c-fd9c-4ff6-8349-cede5254dc50",
                      "parentUUID": "f90c922c-a9c3-4dab-8a97-fd5fd18dd5eb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ba46b56c-fd9c-4ff6-8349-cede5254dc50"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 133,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "2e0cff65-030a-4679-a67e-693abcc7b206",
                  "title": "When admin sends request",
                  "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\category.test.js",
                  "file": "\\__tests__\\category.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should add the category",
                      "fullTitle": "/category POST /category When admin sends request Should add the category",
                      "timedOut": false,
                      "duration": 115,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { email, password } = mockData.users.admin\nconst category = await Category.findOne({})\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\nconst auth_token = signInRes.body['auth-token']\nconst reqBody = {\n    name: 'Cars 2',\n}\nconst prodRes = await chai.request(app).post('/category')\n    .set('Content-Type', 'application/json')\n    .set('auth-token',auth_token)\n    .send(reqBody)\nexpect(prodRes.body.result).to.not.eql(undefined)\nexpect(prodRes.body.result.name).to.eql(reqBody.name)",
                      "err": {},
                      "uuid": "dbe56c79-6ade-4cbb-b05f-708aa25d3492",
                      "parentUUID": "2e0cff65-030a-4679-a67e-693abcc7b206",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dbe56c79-6ade-4cbb-b05f-708aa25d3492"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 115,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "011806d1-9350-4880-91dc-ee18e43f23a5",
          "title": "/order",
          "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\order.test.js",
          "file": "\\__tests__\\order.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e651cb41-bbbc-4ae2-8687-cb55045c4bb3",
              "title": "POST /order",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\order.test.js",
              "file": "\\__tests__\\order.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates an order if cart exists for logged in user",
                  "fullTitle": "/order POST /order creates an order if cart exists for logged in user",
                  "timedOut": false,
                  "duration": 118,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { email, password } = mockData.users.normalUser\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\n\nconst auth_token = signInRes.body['auth-token']\nconst res = await chai\n                .request(app)\n                .post('/order')\n                .set('Content-Type','application/json')\n                .set('auth-token',auth_token)\nexpect((/Order successful/i).test(res.body.message)).to.eql(true)\nexpect(res.body.totalPrice).to.eql(1010)",
                  "err": {},
                  "uuid": "ab1f0873-0a95-4427-9ef4-5caeeaec5b19",
                  "parentUUID": "e651cb41-bbbc-4ae2-8687-cb55045c4bb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "does not create order if cart does not exist i.e empty",
                  "fullTitle": "/order POST /order does not create order if cart does not exist i.e empty",
                  "timedOut": false,
                  "duration": 111,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { email, password } = mockData.users.normalUser\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\n\nconst auth_token = signInRes.body['auth-token']\nconst res = await chai\n                .request(app)\n                .post('/order')\n                .set('Content-Type','application/json')\n                .set('auth-token',auth_token)\nexpect((/No cart found/i).test(res.body.message)).to.eql(true)\nexpect(res.status).to.eql(400)",
                  "err": {},
                  "uuid": "facb998b-ea3f-45e4-beda-e763d7ff195a",
                  "parentUUID": "e651cb41-bbbc-4ae2-8687-cb55045c4bb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns message out of stock if cart product quantity more than in stock",
                  "fullTitle": "/order POST /order returns message out of stock if cart product quantity more than in stock",
                  "timedOut": false,
                  "duration": 146,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const product = await Product.findOne({})\nconst cartBod = {\n    productIds:[\n        {\n            product:product.id,\n            quantity:product.quantity + 10\n        }\n    ]\n}\nconst { email, password } = mockData.users.normalUser\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\n\nconst auth_token = signInRes.body['auth-token']\nawait chai\n    .request(app)\n    .post('/cart')\n    .set('Content-Type','application/json')\n    .set('auth-token',auth_token)\n    .send(cartBod)\nconst res = await chai\n                .request(app)\n                .post('/order')\n                .set('Content-Type','application/json')\n                .set('auth-token',auth_token)\nconsole.log(res.body);  \nexpect((/Some products are out of stock/i).test(res.body.message)).to.eql(true)\nexpect(res.body.outOfStockItems).to.eql(product.name)",
                  "err": {},
                  "uuid": "33c23f40-0c85-4ac9-b433-087c0785ddd3",
                  "parentUUID": "e651cb41-bbbc-4ae2-8687-cb55045c4bb3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab1f0873-0a95-4427-9ef4-5caeeaec5b19",
                "facb998b-ea3f-45e4-beda-e763d7ff195a",
                "33c23f40-0c85-4ac9-b433-087c0785ddd3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 375,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "3561fd52-1290-433c-b338-af896982a98c",
          "title": "/product",
          "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\product.test.js",
          "file": "\\__tests__\\product.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9d634ec2-fb36-44db-a650-7a6d9e8c38b7",
              "title": "GET /product",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\product.test.js",
              "file": "\\__tests__\\product.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the list of all products",
                  "fullTitle": "/product GET /product should return the list of all products",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/product')\n    .set('Content-Type', 'application/json')\nexpect(res.body.products.length).to.eql(2)",
                  "err": {},
                  "uuid": "6f163e7d-b617-43b5-bbf3-58ab14a46cc1",
                  "parentUUID": "9d634ec2-fb36-44db-a650-7a6d9e8c38b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f163e7d-b617-43b5-bbf3-58ab14a46cc1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "24d181db-9718-4651-8299-74bc1341c8a3",
              "title": "POST /product",
              "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\product.test.js",
              "file": "\\__tests__\\product.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "6418ade1-265a-4bcc-be3a-cefd9c395d9a",
                  "title": "When normal user sends request",
                  "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\product.test.js",
                  "file": "\\__tests__\\product.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should not add the product and return a message",
                      "fullTitle": "/product POST /product When normal user sends request Should not add the product and return a message",
                      "timedOut": false,
                      "duration": 120,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { email, password } = mockData.users.normalUser\nconst category = await Category.findOne({})\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\n\nconst auth_token = signInRes.body['auth-token']\nconst reqBody = {\n    name: 'Admin bags',\n    price: 10000,\n    quantity: 1,\n    category: category.id\n}\nconst prodRes = await chai.request(app).post('/product')\n    .set('Content-Type', 'application/json')\n    .set('auth-token',auth_token)\n    .send(reqBody)\nexpect(prodRes.status).to.eql(400)\nexpect((/Access denied/i).test(prodRes.body.message)).to.eql(true)",
                      "err": {},
                      "uuid": "7cd842be-9d2a-467e-ac4f-32fca678c50b",
                      "parentUUID": "6418ade1-265a-4bcc-be3a-cefd9c395d9a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7cd842be-9d2a-467e-ac4f-32fca678c50b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 120,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                },
                {
                  "uuid": "57a42388-7ede-49de-9b55-d79cfab65752",
                  "title": "When admin sends request",
                  "fullFile": "C:\\Users\\maste\\work\\ecommerce-node\\ecommerce\\__tests__\\product.test.js",
                  "file": "\\__tests__\\product.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should add the product",
                      "fullTitle": "/product POST /product When admin sends request Should add the product",
                      "timedOut": false,
                      "duration": 134,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { email, password } = mockData.users.admin\nconst category = await Category.findOne({})\n// sign in \nconst signInRes = await chai.request(app).post('/auth/signin')\n    .set('Content-Type', 'application/json')\n    .send({ email, password })\nconst auth_token = signInRes.body['auth-token']\nconst reqBody = {\n    name: 'Admin bags',\n    price: 10000,\n    quantity: 1,\n    category: category.id\n}\nconst prodRes = await chai.request(app).post('/product')\n    .set('Content-Type', 'application/json')\n    .set('auth-token',auth_token)\n    .send(reqBody)\nexpect(prodRes.body.result).to.not.eql(undefined)\nexpect(prodRes.body.result.name).to.eql(reqBody.name)",
                      "err": {},
                      "uuid": "5c752f4c-ddfe-4f46-8607-85c99955cd9a",
                      "parentUUID": "57a42388-7ede-49de-9b55-d79cfab65752",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5c752f4c-ddfe-4f46-8607-85c99955cd9a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 134,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 60000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}